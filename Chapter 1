# packages

library(ape)
library(vegan)
library(riverdist)
library(raster)
library(SYNCSA)
library(adespatial)

# objects

coord # object “data.frame” equal to geographical coordinates, column 1=Longitude, column 2=Latitude

phygen # object “phylo” equal to phylogenetic tree of the genera pool

comgen # object “data.frame” equal to prescence/absence data, rows=sites, columns=genera

comgenabun # object “data.frame” equal to abundance data, rows=sites, columns=genera

dist.riv # object “data.frame” equal to distance between rivers pairwise, rows=195 sites, column=195 sites

## calculating the distance between sites
# importing the shape of the Amazon basin

B<-line2network(path="amzriverproje",layer="amzriverproje") # "amzriverproje.shp" is a lines layer

# Cleanup of the river network B 

C<-cleanup(B)
y $disolve?
y $insert points
100 $ minimum distance to use
171 $ segment number of river mouth
240 $ vertex number of river mouth
y $ accept mouth assignement
r $ remove region 1
r $ remove region 2
r $ remove region 3
r $ remove region 4
n $ not remove any additional segments?
  y $ build segment routes?

cord.dec <- SpatialPoints(cbind(coord$Longitude, coord$Latitude), proj4string=CRS("+proj=longlat"))
cord.UTM <- spTransform(cord.dec, CRS("+init=epsg:32718"))

coordriv<-xy2segvert(x=cord.UTM$coords.x1,y=cord.UTM$coords.x2,rivers=C)

# distance between the sites considering the watercourse

dist.riv<-riverdistancemat(seg=coordriv$seg, vert=coordriv$vert, rivers=C,stopiferror=TRUE,
                            algorithm="Dijkstra")

# changing the incorrect zero distances to geographic distance

copyc<-dist.riv
distO<-as.matrix(dist(coord,diag=T,upper=T))
zeros<-which(copy==0,arr.ind=T)

for(i in 1:nrow(zeros)){
copyc[zeros[i,1],zeros[i,2]]<-distO[zeros[i,1],zeros[i,2]]*111325
}

# importing slope

slp<-raster("slope_1KMmn_SRTM.tif")
slope<-extract(slp,coord)

# importing elevation 

elevation<-raster("PER_alt.gri")
elev<-extract(elevation,coord)

# importing precipitacion of WorldClim (BIO 12)

pp<-raster("wc2.0_bio_2.5m_12.tif")
precip<-extract(pp,coord)
b12<-pp

# importing Temperature Annual Range of WorldClim (BIO 7)

temperaturer<-raster("wc2.0_bio_2.5m_07.tif")
tempr<-extract(temperaturer,coord)
b7<-temperaturer

# importing precipitation range based on WorldClim (BIO 13 - BIO 14)

b13<-raster("wc2.0_bio_2.5m_13.tif")
b14<-raster("wc2.0_bio_2.5m_14.tif")

p13<-extract(b13,coord)
p14<-extract(b14,coord)
precipr<- p13-p14

amb<-cbind(slope,elev,precip,tempr,precipr)

# importing raster of BIO variables of WorldClim (BIO 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16,17, 18, 19)

b2<-raster("wc2.0_bio_2.5m_02.tif")
b3<-raster("wc2.0_bio_2.5m_03.tif")
b4<-raster("wc2.0_bio_2.5m_04.tif")
b5<-raster("wc2.0_bio_2.5m_05.tif")
b6<-raster("wc2.0_bio_2.5m_06.tif")
b8<-raster("wc2.0_bio_2.5m_08.tif")
b9<-raster("wc2.0_bio_2.5m_09.tif")
b10<-raster("wc2.0_bio_2.5m_10.tif")
b11<-raster("wc2.0_bio_2.5m_11.tif")
b12<-raster("wc2.0_bio_2.5m_12.tif")
b14<-raster("wc2.0_bio_2.5m_14.tif")
b15<-raster("wc2.0_bio_2.5m_15.tif")
b16<-raster("wc2.0_bio_2.5m_16.tif")
b17<-raster("wc2.0_bio_2.5m_17.tif")
b18<-raster("wc2.0_bio_2.5m_18.tif")
b19<-raster("wc2.0_bio_2.5m_19.tif")

# extract of values of each BIO of each site

v1<-extract(b1,coord)
v2<-extract(b2,coord)
v3<-extract(b3,coord)
v4<-extract(b4,coord)
v5<-extract(b5,coord)
v6<-extract(b6,coord)
v7<-extract(b7,coord)
v8<-extract(b8,coord)
v9<-extract(b9,coord)
v10<-extract(b10,coord)
v11<-extract(b11,coord)
v12<-extract(b12,coord)
v13<-extract(b13,coord)
v14<-extract(b14,coord)
v15<-extract(b15,coord)
v16<-extract(b16,coord)
v17<-extract(b17,coord)
v18<-extract(b18,coord)
v19<-extract(b19,coord)

# pre analysis

# all environmental variables related to WorldClim (without BIO 1)

mm<-cbind(v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19)

# calculating the phylogenetic eigenvectors

p<-matrix.p(comgen,cophenetic(phygen))$matrix.P
distphy<-sqrt(vegdist(p,method="bray"))
pcoaf<-pcoa(distphy)				
pcoafg<-pcoaf$vectors[,1:173] # 173 positives eigenvalues

abuH<-decostand(comgenabun,"hellinger")

rdaf<-rda(abuH ~ pcoafg)
r2adjf<-RsquareAdj(rdaf)$adj.r.squared
self<-forward.sel(abuH,pcoafg,adjR2thresh=r2adjf)
pcnmSelf<-pcoafg[,self[,2]]

# calculating the spatial eigenvectors

pcnmd<-pcnm(copyc)$vectors
rdad<-rda(abuH~pcnmd)
r2adjd<-RsquareAdj(rdad)$adj.r.squared
seld<-forward.sel(abuH,pcnmd,adjR2thresh=r2adjd)
pcnmSeld<-pcnmd[,seld[,2]]

## varpart

# amb1 = slope, elevation and 3 climatic variables

amb1<- amb

rdafinal<-varpart(abuH,pcnmSeld,pcnmSelf,amb1)
plot(rdafinal)

# testing signficance

adfg1<-anova(rda(abuH~pcnmSeld,permutation=how(nperm=999)))
bdeg1<-anova(rda(abuH~as.matrix(pcnmSelf),permutation=how(nperm=999)))
cefg1<-anova(rda(abuH~amb1,permutation=how(nperm=999)))

abdefg1<-anova(rda(abuH ~ cbind(pcnmSeld,as.matrix(pcnmSelf)), permutation=how(nperm=999)))
acdefg1<-anova(rda(abuH ~ cbind(pcnmSeld,amb1), permutation=how(nperm=999)))
bcdefg1<-anova(rda(abuH ~ cbind(amb1,as.matrix(pcnmSelf)), permutation=how(nperm=999)))
abcdefg1<-anova(rda(abuH ~ cbind(amb1,pcnmSeld,as.matrix(pcnmSelf)), permutation=how(nperm=999)))

a1<-anova(rda(abuH,pcnmSeld, cbind(amb1,as.matrix(pcnmSelf)), permutation=how(nperm=999)))
b1<-anova(rda(abuH,pcnmSelf, cbind(amb1,as.matrix(pcnmSeld)), permutation=how(nperm=999)))
c1<-anova(rda(abuH,avamb, cbind(pcnmSelf,as.matrix(pcnmSeld)), permutation=how(nperm=999)))

ad1<-anova(rda(abuH,pcnmSeld,amb1, permutation=how(nperm=999)))
af1<-anova(rda(abuH,pcnmSeld,as.matrix(pcnmSelf), permutation=how(nperm=999)))
bd1<-anova(rda(abuH,as.matrix(pcnmSelf),amb1, permutation=how(nperm=999)))
be1<-anova(rda(abuH,as.matrix(pcnmSelf),pcnmSeld, permutation=how(nperm=999)))
ce1<-anova(rda(abuH,amb1,pcnmSeld, permutation=how(nperm=999)))
cf1<-anova(rda(abuH,amb1,as.matrix(pcnmSelf), permutation=how(nperm=999)))

# amb2 = 18 climatics variables, slope and elevation

amb2<-cbind(mm,slope,unido)

rda2<-rda(abuH~amb2)
r2adj<-RsquareAdj(rda2)$adj.r.squared
fselamb2<-forward.sel(abuH,amb2,adjR2thresh = r2adj)
avamb2<-amb2[,fselamb2[,2]]

rdafinal<-varpart(abuH,pcnmSeld,
pcnmSelf,avamb2)
plot(rdafinal)

# testing signficance

adfg2<-anova(rda(abuH~pcnmSeld,permutation=how(nperm=999)))
bdeg2<-anova(rda(abuH~as.matrix(pcnmSelf),permutation=how(nperm=999)))
cefg2<-anova(rda(abuH~avamb,permutation=how(nperm=999)))

abdefg2<-anova(rda(abuH ~ cbind(pcnmSeld,as.matrix(pcnmSelf)), permutation=how(nperm=999)))
acdefg2<-anova(rda(abuH ~ cbind(pcnmSeld,avamb), permutation=how(nperm=999)))
bcdefg2<-anova(rda(abuH ~ cbind(avamb,as.matrix(pcnmSelf)), permutation=how(nperm=999)))
abcdefg2<-anova(rda(abuH ~ cbind(avamb,pcnmSeld,as.matrix(pcnmSelf)), permutation=how(nperm=999)))

a2<-anova(rda(abuH,pcnmSeld, cbind(avamb,as.matrix(pcnmSelf)), permutation=how(nperm=999)))
b2<-anova(rda(abuH,pcnmSelf, cbind(avamb,as.matrix(pcnmSeld)), permutation=how(nperm=999)))
c2<-anova(rda(abuH,avamb, cbind(pcnmSelf,as.matrix(pcnmSeld)), permutation=how(nperm=999)))

ad2<-anova(rda(abuH,pcnmSeld,avamb, permutation=how(nperm=999)))
af2<-anova(rda(abuH,pcnmSeld,as.matrix(pcnmSelf), permutation=how(nperm=999)))
bd2<-anova(rda(abuH,as.matrix(pcnmSelf),avamb, permutation=how(nperm=999)))
be2<-anova(rda(abuH,as.matrix(pcnmSelf),pcnmSeld, permutation=how(nperm=999)))
ce2<-anova(rda(abuH,avamb,pcnmSeld, permutation=how(nperm=999)))
cf2<-anova(rda(abuH,avamb,as.matrix(pcnmSelf), permutation=how(nperm=999)))

############ END
